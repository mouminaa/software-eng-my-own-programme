//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\zhout\source\repos\momo2\Antlr\Content\Booking.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class BookingParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, YEAR=9, 
		NUMBER=10, MONTH=11, STRING=12, JAN=13, FEB=14, MAR=15, APR=16, MAY=17, 
		JUN=18, JUL=19, AUG=20, SEP=21, OCT=22, NOV=23, DEC=24, SEPARATOR=25, 
		COLON=26, WS=27;
	public const int
		RULE_booking = 0, RULE_time = 1, RULE_person = 2, RULE_firstName = 3, 
		RULE_lastName = 4, RULE_numberOfGuests = 5, RULE_datetime = 6;
	public static readonly string[] ruleNames = {
		"booking", "time", "person", "firstName", "lastName", "numberOfGuests", 
		"datetime"
	};

	private static readonly string[] _LiteralNames = {
		null, "'book'", "'a'", "'hotel'", "'room'", "'for'", "'guests'", "'on'", 
		"'and'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'-'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "YEAR", "NUMBER", 
		"MONTH", "STRING", "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", 
		"SEP", "OCT", "NOV", "DEC", "SEPARATOR", "COLON", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Booking.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public BookingParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class BookingContext : ParserRuleContext {
		public Booking b;
		public PersonContext _person;
		public TimeContext _time;
		public PersonContext person() {
			return GetRuleContext<PersonContext>(0);
		}
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public BookingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booking; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.EnterBooking(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.ExitBooking(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBookingVisitor<TResult> typedVisitor = visitor as IBookingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooking(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BookingContext booking() {
		BookingContext _localctx = new BookingContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_booking);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(T__0);
			State = 15; Match(T__1);
			State = 16; Match(T__2);
			State = 17; Match(T__3);
			State = 18; Match(T__4);
			State = 19; _localctx._person = person();
			State = 20; Match(T__5);
			State = 21; Match(T__6);
			State = 22; _localctx._time = time();

			      _localctx.b = new Booking();
			      _localctx.b.Time=_localctx._time.t;
			      _localctx.b.Person=_localctx._person.p;

			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		public DateTime t;
		public DatetimeContext d;
		public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.EnterTime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.ExitTime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBookingVisitor<TResult> typedVisitor = visitor as IBookingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25; _localctx.d = datetime();

			    Console.WriteLine((_localctx.d!=null?_input.GetText(_localctx.d.start,_localctx.d.stop):null));
			    _localctx.t = DateTime.Parse((_localctx.d!=null?_input.GetText(_localctx.d.start,_localctx.d.stop):null));


			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PersonContext : ParserRuleContext {
		public Person p;
		public FirstNameContext f;
		public LastNameContext l;
		public NumberOfGuestsContext n;
		public FirstNameContext firstName() {
			return GetRuleContext<FirstNameContext>(0);
		}
		public LastNameContext lastName() {
			return GetRuleContext<LastNameContext>(0);
		}
		public NumberOfGuestsContext numberOfGuests() {
			return GetRuleContext<NumberOfGuestsContext>(0);
		}
		public PersonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_person; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.EnterPerson(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.ExitPerson(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBookingVisitor<TResult> typedVisitor = visitor as IBookingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPerson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PersonContext person() {
		PersonContext _localctx = new PersonContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_person);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; _localctx.f = firstName();
			State = 29; _localctx.l = lastName();
			State = 30; Match(T__7);
			State = 31; _localctx.n = numberOfGuests();


			       _localctx.p = new Person();
			       _localctx.p.FirstName=(_localctx.f!=null?_input.GetText(_localctx.f.start,_localctx.f.stop):null);
			       _localctx.p.LastName=(_localctx.l!=null?_input.GetText(_localctx.l.start,_localctx.l.stop):null);
			       _localctx.p.NumberOfGuests=int.Parse((_localctx.n!=null?_input.GetText(_localctx.n.start,_localctx.n.stop):null));

			   
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstNameContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(BookingParser.STRING, 0); }
		public FirstNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.EnterFirstName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.ExitFirstName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBookingVisitor<TResult> typedVisitor = visitor as IBookingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstNameContext firstName() {
		FirstNameContext _localctx = new FirstNameContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_firstName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastNameContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(BookingParser.STRING, 0); }
		public LastNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.EnterLastName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.ExitLastName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBookingVisitor<TResult> typedVisitor = visitor as IBookingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastNameContext lastName() {
		LastNameContext _localctx = new LastNameContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_lastName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberOfGuestsContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(BookingParser.NUMBER, 0); }
		public NumberOfGuestsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberOfGuests; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.EnterNumberOfGuests(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.ExitNumberOfGuests(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBookingVisitor<TResult> typedVisitor = visitor as IBookingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOfGuests(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberOfGuestsContext numberOfGuests() {
		NumberOfGuestsContext _localctx = new NumberOfGuestsContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_numberOfGuests);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(BookingParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(BookingParser.NUMBER, i);
		}
		public ITerminalNode[] SEPARATOR() { return GetTokens(BookingParser.SEPARATOR); }
		public ITerminalNode SEPARATOR(int i) {
			return GetToken(BookingParser.SEPARATOR, i);
		}
		public ITerminalNode MONTH() { return GetToken(BookingParser.MONTH, 0); }
		public ITerminalNode YEAR() { return GetToken(BookingParser.YEAR, 0); }
		public ITerminalNode COLON() { return GetToken(BookingParser.COLON, 0); }
		public DatetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.EnterDatetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBookingListener typedListener = listener as IBookingListener;
			if (typedListener != null) typedListener.ExitDatetime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBookingVisitor<TResult> typedVisitor = visitor as IBookingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeContext datetime() {
		DatetimeContext _localctx = new DatetimeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_datetime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(NUMBER);
			State = 41; Match(NUMBER);
			State = 42; Match(SEPARATOR);
			State = 43; Match(MONTH);
			State = 44; Match(SEPARATOR);
			State = 45; Match(YEAR);
			State = 46; Match(NUMBER);
			State = 47; Match(NUMBER);
			State = 48; Match(COLON);
			State = 49; Match(NUMBER);
			State = 50; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1D\x37\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x2\x2\x2\t\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x2\x2/\x2\x10"+
		"\x3\x2\x2\x2\x4\x1B\x3\x2\x2\x2\x6\x1E\x3\x2\x2\x2\b$\x3\x2\x2\x2\n&\x3"+
		"\x2\x2\x2\f(\x3\x2\x2\x2\xE*\x3\x2\x2\x2\x10\x11\a\x3\x2\x2\x11\x12\a"+
		"\x4\x2\x2\x12\x13\a\x5\x2\x2\x13\x14\a\x6\x2\x2\x14\x15\a\a\x2\x2\x15"+
		"\x16\x5\x6\x4\x2\x16\x17\a\b\x2\x2\x17\x18\a\t\x2\x2\x18\x19\x5\x4\x3"+
		"\x2\x19\x1A\b\x2\x1\x2\x1A\x3\x3\x2\x2\x2\x1B\x1C\x5\xE\b\x2\x1C\x1D\b"+
		"\x3\x1\x2\x1D\x5\x3\x2\x2\x2\x1E\x1F\x5\b\x5\x2\x1F \x5\n\x6\x2 !\a\n"+
		"\x2\x2!\"\x5\f\a\x2\"#\b\x4\x1\x2#\a\x3\x2\x2\x2$%\a\xE\x2\x2%\t\x3\x2"+
		"\x2\x2&\'\a\xE\x2\x2\'\v\x3\x2\x2\x2()\a\f\x2\x2)\r\x3\x2\x2\x2*+\a\f"+
		"\x2\x2+,\a\f\x2\x2,-\a\x1B\x2\x2-.\a\r\x2\x2./\a\x1B\x2\x2/\x30\a\v\x2"+
		"\x2\x30\x31\a\f\x2\x2\x31\x32\a\f\x2\x2\x32\x33\a\x1C\x2\x2\x33\x34\a"+
		"\f\x2\x2\x34\x35\a\f\x2\x2\x35\xF\x3\x2\x2\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Antlr.Content
